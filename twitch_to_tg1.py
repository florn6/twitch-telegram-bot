import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from twitchio.ext import commands
from telegram import Bot as TelegramBot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TWITCH_TOKEN     = os.environ['TWITCH_TOKEN']        # —Ç–æ–∫–µ–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ tw2tg_bot
TWITCH_CHANNEL   = os.environ['TWITCH_CHANNEL']      # –∏–º—è –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä forlorn_6
TELEGRAM_TOKEN   = os.environ['TELEGRAM_TOKEN']      # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = int(os.environ['TELEGRAM_CHAT_ID'])  # ID, –∫—É–¥–∞ —Å–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–π ID)

# –û—Å–Ω–æ–≤–Ω–æ–π Twitch->Telegram –±–æ—Ç
class BridgeBot(commands.Bot):
    def __init__(self):
        super().__init__(
            token=TWITCH_TOKEN,
            prefix='!',
            initial_channels=[TWITCH_CHANNEL]
        )
        self.tg = TelegramBot(token=TELEGRAM_TOKEN)
        self.tg_chat_id = TELEGRAM_CHAT_ID

    async def event_ready(self):
        print(f'‚úÖ Twitch –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {self.nick}')

    async def event_message(self, message):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.author.name.lower() == self.nick.lower():
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f'<{message.author.name}>: {message.content}'
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (Render –ª–æ–≥)
        print(f'üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.name}: {message.content}')
        print(f'‚è© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {text}')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await self.tg.send_message(chat_id=self.tg_chat_id, text=text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –±—É–¥—É—Ç
        await self.handle_commands(message)

# "–§–∞–ª—å—à–∏–≤—ã–π" HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"I'm alive!")

def run_fake_server():
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), PingHandler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
threading.Thread(target=run_fake_server, daemon=True).start()

# –ó–∞–ø—É—Å–∫ Twitch-–±–æ—Ç–∞
if __name__ == '__main__':
    bot = BridgeBot()
    bot.run()
